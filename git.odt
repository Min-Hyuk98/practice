형상관리 : 생성, 수정, 저장
    SCM(Software Configuration Management)
    형상 항목을 식별하여 
    그 기능적 물리적 특성을 문서화하고
    그러한 특성에 대한 변경을 제어하고
    변경 처리 상태를 기록 및 보고하고
    명시된 요구사항에 부합하는지 확인하는
    일련의 사항에 대해 기술적 행정적인 지침과 사후 관리를 적용하는 원칙
    필요성
        동일한 프로젝트에 대하여 여러 개발자가 동시에 개발할 수 있어야 한다
        이전 리비전이나 버전에 대한 정보를 언제든지 접근할 수 있어야 한다
        에러가 발생했을 경우 빠른 시간 내에 처리할 수 있어야 한다
        불필요항 사용자가 소스를 수정할 수 없도록 해야 한다
        사용자의 요구에 따라 적시에 최상의 소프트웨어를 공급할 수 있어야 한다

버전관리
    파일의 변화를 시간에 따라 기록하는 시스템
     >>사용자가 과거 특정 시점의 버전을 다시 불러올 수 있음
     장점
        생산성 향상
        소스코드 백업 용도
        branch
        decent tools
    drobbox google_drive git subversion  perforce

    버전관리란?
        버전관리 시스템은 파일 변화를 시간에 따라 기록했다가 
        나중에 특정 시점의 버전을 다시 꺼내올 수 있는 시스템
        -각 파일을 이전 상태로 되돌릴 수 있다
        -프로젝트를 통째로 이전 상태로 되돌릴 수 있다
        -시간에 따라 수정 내용을 비교해 볼수 있다
        -누가 문제를 일으켰는지도 추적할 수 있다
        -누가 언제 만들어낸 이슈인지도 알 수 있다
    로컬 버전 관리
        디렉토리로 파일을 시간 정보와 함께 복사하는 방법
        실수로 디렉토리 삭제, 파일 잘못 고치거나 잘못복사 가능성
    중앙집중식 버전 관리
        ex)cvs, subversion, perforce
        -시스템은 파일을 관리하는 서버가 별도로 존재
        -클라이언트가 중앙 서버에서 파일을 받아서 사용
        장점:
            -모두 누가 무엇을 하고 있는지 알 수 있다
            -관리자는 누가 무엇을 할 지 꼼꼼하게 관리
        단점:
            -중앙 데이터베이스가 있는 디스크 문제로 모두 날아가면 끝
            -서버가 다운되면 그동안 아무 작업 못함
    분산 버전 관리 시스템
        클라이언트는 단순히 파일의 마지막 스냅샷을 checkout하지 않음
        클라이언트는 저장소를 전부 복제
        서버에 문제가 생기면 이 복제물로 다시 작업을 시작할 수 있음
        동시에 다양한 그룹과 다양한 방법으로 협업
        계층모델같은 중앙집중식 시스템으로는 할 수 없는 워크플로를 다양하게 사용
        ex) git, mercurial
Git
    리눅스 커널을 관리하기 위해 처음 만들어짐
    빠른 속도, 단순한 구조, 비선형적인 개발, 완벽한 분산

    Snapshot
        git은 데이터를 파일 시스템 스냅샷으로 취급하고 크기가 아주 작음
        커밋하거나 프로젝트의 상태를 저장할 때마다 파일이 존재하는 그 순간을 중요하게 여김
        *파일이 변경되지 않았다면, 새로 저장하지 않고 이전 상태의 파일에 대한 링크만 저장
    네트워크 없는 환경
        거의 모든 명령이 로컬 파일과 데이터만 사용하기 때문에 네트워크에 있는 다른 컴퓨터는 필요없음
        >>>>>>중앙집중식 버전 관리에서는 항상 네트워크가 필요
        git은 프로젝트의 히스토리를 조회할 때 서버 없이 조회
        >>>>로컬 데이터베이스에서 히스토리를 읽어서 보여줌
        -git으로 무얼 하든 git 데이터베이스에 데이터가 추가
            되돌리가나 데이터 삭제 불가능
            프로젝트가 심각하게 망가질 걱정 없음



    clone을 하면 디렉토리를 하나 만들어준다 여기서 push하면 다른 정보 필요 없이 바로 올라감
    디렉토리를 임의로 만들고 init 한 후 pull 하면 그 디렉토리에 그대로 내용을 가져온다
    pull해온 디렉토리에서 push를 하려면 remote 이름과 branch를 입력해 주어야 한다


